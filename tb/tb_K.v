
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
`timescale 1 ps / 1 ps
module tb_K();

	//////////// CLOCK //////////
	reg 		          CLOCK_50;
	reg 							RST;
  reg               WRITE;
	
	//////////// SRAM //////////
	wire		    [19:0]		SRAM_ADDR;
	wire		          		SRAM_CE_N;
	wire 		    [15:0]		SRAM_DQ;
	wire		          		SRAM_LB_N;
	wire		          		SRAM_OE_N;
	wire		          		SRAM_UB_N;
	wire		          		SRAM_WE_N;


//=======================================================
//  REG/WIRE declarations
//=======================================================

sram_controller SRAM(
		.address(20'h00000),       //  avalon_sram_slave.address
		.byteenable(2'b11),    //                   .byteenable
		.read(1'b0),          //                   .read
		.write(WRITE),         //                   .write
		.writedata(16'h8008),     //                   .writedata
		.readdata(),      //                   .readdata
		.readdatavalid(), //                   .readdatavalid
		.clk(CLOCK_50),           //                clk.clk
		.SRAM_DQ(SRAM_DQ),       // external_interface.DQ
		.SRAM_ADDR(SRAM_ADDR),     //                   .ADDR
		.SRAM_LB_N(SRAM_LB_N),     //                   .LB_N
		.SRAM_UB_N(SRAM_UB_N),     //                   .UB_N
		.SRAM_CE_N(SRAM_CE_N),     //                   .CE_N
		.SRAM_OE_N(SRAM_OE_N),     //                   .OE_N
		.SRAM_WE_N(SRAM_WE_N),     //                   .WE_N
		.reset(RST)          //              reset.reset
	);

  initial begin
    CLOCK_50 = 1'b0;
    RST =  1'b0;
    WRITE = 1'b0;
    #500 RST = 1'b1;
    #100 RST = 1'b0;
  end
  
  always #50 CLOCK_50 = ~CLOCK_50;
  always #200 WRITE = ~WRITE;
//=======================================================
//  Structural coding
//=======================================================

endmodule
